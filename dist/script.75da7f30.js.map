{"version":3,"sources":["script.js"],"names":["monthlyColumns","document","querySelector","incomeMonthly","incomeInput","incomeAmountNumber","columnAmount","querySelectorAll","moneyLeft","totalExpenses","shoppingList","inputsOfPrizes","inputsOfItems","incomeAmount","sumOfEveryColumn","first","second","third","fourth","fifth","itemsOfEveryColumn","salaryAmount","e","parseFloat","currentTarget","value","textContent","toFixed","localStorage","setItem","JSON","stringify","sumAllColumns","valueOfItemPrice","sameAttr","dataset","name","priceOfItem","forEach","p","getAttribute","target","addItemToList","displayTheList","objectOfSum","arrOfSumAllColumns","Object","entries","key","push","sumOfAllColumns","splice","length","reduce","prev","cur","countMoneyLeft","moneyAll","income","allExpences","inputValue","number","addToLocalStorage","objectOfColumns","html","map","item","id","join","list","classList","add","innerHTML","remove","deleteItem","deletedValue","newArr","filter","i","updateAmount","numberOfList","columnNumber","restoreFromLocalStorage","listItems","parse","getItem","amountToDisplay","x","next","incomeStorage","input","addEventListener","btn","parseInt","delete","chosenValue"],"mappings":"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","file":"script.75da7f30.js","sourceRoot":"..","sourcesContent":["const monthlyColumns = document.querySelector('.monthlyColumns');\r\nconst incomeMonthly = document.querySelector('.grid-header__one h3');\r\nconst incomeInput = document.querySelector('[name=\"income\"]');\r\nconst incomeAmountNumber = document.querySelector('.income');\r\nconst columnAmount = monthlyColumns.querySelectorAll('.amount');\r\nconst moneyLeft = document.querySelector('.money-left');\r\nconst totalExpenses = document.querySelector('.total-expenses');\r\nconst shoppingList = document.querySelectorAll('.list');\r\n\r\nconst inputsOfPrizes = monthlyColumns.querySelectorAll(\"[name='sum']\");\r\nconst inputsOfItems = document.querySelectorAll(\"input[data-item='item']\")\r\n\r\n// amount that I get every new month + the leftover from the previous month\r\nlet incomeAmount = 0;\r\n\r\n// sum for each column\r\nlet sumOfEveryColumn = {\r\n    first: 0,\r\n    second: 0,\r\n    third: 0,\r\n    fourth: 0,\r\n    fifth: 0\r\n};\r\n\r\n// the list of item written down for each column\r\nlet itemsOfEveryColumn = {\r\n    first: [],\r\n    second: [],\r\n    third: [],\r\n    fourth: [],\r\n    fifth: []\r\n}\r\n\r\n// add and show monthly income + the leftover from the previous month\r\nfunction salaryAmount(e) {\r\n    incomeAmount += parseFloat(e.currentTarget.value);\r\n    if(!incomeAmount > 0) return ;\r\n    incomeAmountNumber.textContent = incomeAmount.toFixed(2);\r\n    e.currentTarget.value = \"\";\r\n    localStorage.setItem('Income', JSON.stringify(incomeAmount))\r\n    sumAllColumns(sumOfEveryColumn);\r\n}\r\n\r\n// get the sum that was written down in the column\r\nfunction valueOfItemPrice(e){\r\n    // find active the input by data-name\r\n    const sameAttr = e.currentTarget.dataset.name;\r\n    // get the value from this input\r\n    const priceOfItem = parseFloat(e.currentTarget.value);\r\n    // loop over each column and check if data-name for the active\r\n    // input is the same as p for this column,\r\n    // then display new amount in p and sum it all up\r\n    columnAmount.forEach(p => {   \r\n        if (p.getAttribute(\"data-name\") === sameAttr)\r\n        {   // we take data-name and use it as objetct[key] to find correct column\r\n            sumOfEveryColumn[sameAttr] += priceOfItem;\r\n            p.textContent = sumOfEveryColumn[sameAttr].toFixed(2);\r\n        } \r\n    })\r\n    e.target.value = \"\";\r\n    addItemToList(priceOfItem, sameAttr);\r\n    displayTheList(itemsOfEveryColumn);\r\n    sumAllColumns(sumOfEveryColumn);\r\n}\r\n\r\n// loop over each column and take total amount , then sum them all up\r\nfunction sumAllColumns (objectOfSum) {\r\n    // make temporare arr and loop over all columns and push values to arr\r\n    let arrOfSumAllColumns = [];\r\n    // loop over each key of Object to get value\r\n    for (const [key, value] of Object.entries(objectOfSum)) {\r\n       arrOfSumAllColumns.push(value);\r\n    }\r\n    // take only last 5 added values from the arr and sum it all\r\n    const sumOfAllColumns = arrOfSumAllColumns\r\n        .splice(arrOfSumAllColumns.length - 5)\r\n        .reduce((prev, cur) => {\r\n            return prev + cur;\r\n        })\r\n    countMoneyLeft(moneyLeft, incomeAmount, sumOfAllColumns)\r\n    // moneyLeft.textContent = (incomeAmount - sumOfAllColumns).toFixed(2);\r\n    // totalExpenses.textContent = sumOfAllColumns.toFixed(2);\r\n}\r\n\r\nfunction countMoneyLeft(moneyAll, income, allExpences) {\r\n    moneyAll.textContent = (income - allExpences).toFixed(2);\r\n    totalExpenses.textContent = allExpences.toFixed(2);\r\n}\r\n\r\n// add items from input to the list for each column separately \r\nfunction addItemToList(inputValue, number) {\r\n    for ([key, value] of Object.entries(itemsOfEveryColumn)) {\r\n        if(key === number && inputValue > 0) {\r\n            value.push(inputValue)\r\n            addToLocalStorage(itemsOfEveryColumn)\r\n        }\r\n    }\r\n}\r\n\r\n// display the list all items for each column\r\nfunction displayTheList(objectOfColumns) {\r\n    for ([key, value] of Object.entries(objectOfColumns)) {\r\n        if(value.length > 0) {\r\n            const html = value.map((item, id)=>\r\n            `\r\n            <li class=\"item shopping-item\">\r\n                <span data-delete=\"${id}\" data-value=${item} class='delete'>x</span>\r\n                <span>${item}</span>\r\n            </li>  \r\n            `\r\n            ).join('');\r\n            shoppingList.forEach(list => {\r\n                if(list.dataset.name === key) {\r\n                    list.classList.add('open');\r\n                    list.innerHTML = html;\r\n                }\r\n            })\r\n        } else {\r\n            shoppingList.forEach(list => {\r\n                if(list.dataset.name === key) {\r\n                    list.classList.remove('open');\r\n                    list.innerHTML = ` `;\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n// click x to delete item from list and from Object Array\r\n// Arguments: id - x[id] , list is current list of column , and then our Object\r\nfunction deleteItem(deletedValue, id, list, objectOfColumns) {\r\n    let newArr;\r\n    for (let [key, value] of Object.entries(objectOfColumns)) {\r\n        if(key === list.dataset.name) {\r\n           newArr = value.filter((item, i) => i !== id);\r\n           value = newArr;\r\n        }\r\n        objectOfColumns[key] = value;\r\n    }\r\n \r\n    updateAmount(list, deletedValue);\r\n    displayTheList(itemsOfEveryColumn);\r\n    addToLocalStorage(objectOfColumns);\r\n}\r\n\r\n// update all numbers after deleting items in columns\r\nfunction updateAmount(numberOfList, deletedValue) {\r\n    columnAmount.forEach(p => {   \r\n        const columnNumber = numberOfList.dataset.name;\r\n        if (p.dataset.name === columnNumber)\r\n        {   // we take data-name and use it as objetct[key] to find correct column\r\n            sumOfEveryColumn[columnNumber] -= deletedValue;\r\n            p.textContent = sumOfEveryColumn[columnNumber].toFixed(2);\r\n        } \r\n        sumAllColumns(sumOfEveryColumn);\r\n    })\r\n}\r\n\r\n// set Local Storage\r\nfunction addToLocalStorage(objectOfColumns) {\r\n    for (let [key, value] of Object.entries(objectOfColumns)) {\r\n        localStorage.setItem(`column - ${key}`, JSON.stringify(objectOfColumns[key]));\r\n    }\r\n}\r\n\r\nfunction restoreFromLocalStorage(objectOfColumns) {\r\n    //pull the items from local storage\r\n    for (let [key, value] of Object.entries(objectOfColumns)) {\r\n        if(key) {\r\n            let listItems = JSON.parse(localStorage.getItem(`column - ${key}`)) || [];\r\n            if (listItems.length > 0) {\r\n                objectOfColumns[key].push(...listItems);\r\n                displayTheList(itemsOfEveryColumn);\r\n            }\r\n        }\r\n        columnAmount.forEach(p => {   \r\n            if (p.dataset.name === key && value.length > 0) {   \r\n                // we take data-name and use it as objetct[key] to find correct column\r\n                const amountToDisplay = [];\r\n                value.forEach(item => amountToDisplay.push(item));\r\n                const x = amountToDisplay.reduce((prev, next) => prev + next)\r\n                sumOfEveryColumn[key] += x;\r\n                p.textContent = sumOfEveryColumn[key].toFixed(2);\r\n            } \r\n        })\r\n    }   \r\n    let incomeStorage = JSON.parse(localStorage.getItem('Income')) || 0;\r\n    incomeAmountNumber.textContent = incomeStorage;\r\n    incomeAmount = incomeStorage;\r\n    let arrOfSumAllColumns = [];\r\n    // loop over each key of Object to get value\r\n    for (const [key, value] of Object.entries(sumOfEveryColumn)) {\r\n       arrOfSumAllColumns.push(value);\r\n    }\r\n    // take only last 5 added values from the arr and sum it all\r\n    const sumOfAllColumns = arrOfSumAllColumns\r\n        .splice(arrOfSumAllColumns.length - 5)\r\n        .reduce((prev, cur) => {\r\n            return prev + cur;\r\n        })\r\n    countMoneyLeft(moneyLeft, incomeAmount, sumOfAllColumns)\r\n    //countMoneyLeft(moneyLeft, incomeAmount, sumOfAllColumns)\r\n}\r\n\r\ninputsOfPrizes.forEach(input => input.addEventListener('change', valueOfItemPrice));\r\nincomeInput.addEventListener('change', salaryAmount);\r\n\r\n\r\nshoppingList.forEach(list => {\r\n    list.addEventListener('click', (e) => {\r\n        const btn = parseInt(e.target.dataset.delete);\r\n        const chosenValue = parseFloat(e.target.dataset.value);\r\n        if(btn || btn === 0) {\r\n            deleteItem(chosenValue, btn, list, itemsOfEveryColumn);\r\n        }\r\n    })\r\n})\r\n\r\n\r\nrestoreFromLocalStorage(itemsOfEveryColumn);\r\ndisplayTheList(itemsOfEveryColumn);\r\n\r\n"]}