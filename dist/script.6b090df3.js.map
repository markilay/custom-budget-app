{"version":3,"sources":["script.js"],"names":["monthlyColumns","document","querySelector","incomeMonthly","incomeInput","incomeAmountNumber","columnAmount","querySelectorAll","moneyLeft","totalExpenses","shoppingList","inputsOfPrizes","inputsOfItems","incomeAmount","sumOfEveryColumn","first","second","third","fourth","fifth","itemsOfEveryColumn","salaryAmount","e","parseFloat","currentTarget","value","textContent","toFixed","localStorage","setItem","JSON","stringify","sumAllColumns","valueOfItemPrice","sameAttr","dataset","name","priceOfItem","forEach","p","getAttribute","target","addItemToList","displayTheList","objectOfSum","Object","arrOfSumAllColumns","entries","push","sumOfAllColumns","splice","length","reduce","prev","cur","countMoneyLeft","moneyAll","income","allExpences","inputValue","number","key","addToLocalStorage","objectOfColumns","html","map","item","id","join","list","classList","add","innerHTML","remove","deleteItem","deletedValue","newArr","filter","i","updateAmount","numberOfList","columnNumber","restoreFromLocalStorage","listItems","parse","getItem","amountToDisplay","x","next","incomeStorage","input","addEventListener","btn","parseInt","delete","chosenValue"],"mappings":"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","file":"script.6b090df3.js","sourceRoot":"..","sourcesContent":["const monthlyColumns = document.querySelector('.monthlyColumns');\r\nconst incomeMonthly = document.querySelector('.grid-header__one h3');\r\nconst incomeInput = document.querySelector('[name=\"income\"]');\r\nconst incomeAmountNumber = document.querySelector('.income');\r\nconst columnAmount = monthlyColumns.querySelectorAll('.amount');\r\nconst moneyLeft = document.querySelector('.money-left');\r\nconst totalExpenses = document.querySelector('.total-expenses');\r\nconst shoppingList = document.querySelectorAll('.list');\r\n\r\nconst inputsOfPrizes = monthlyColumns.querySelectorAll(\"[name='sum']\");\r\nconst inputsOfItems = document.querySelectorAll(\"input[data-item='item']\")\r\n\r\n// amount that I get every new month + the leftover from the previous month\r\nlet incomeAmount = 0;\r\n\r\n// sum for each column\r\nlet sumOfEveryColumn = {\r\n    first: 0,\r\n    second: 0,\r\n    third: 0,\r\n    fourth: 0,\r\n    fifth: 0\r\n};\r\n\r\n// the list of item written down for each column\r\nlet itemsOfEveryColumn = {\r\n    first: [],\r\n    second: [],\r\n    third: [],\r\n    fourth: [],\r\n    fifth: []\r\n}\r\n\r\n// add and show monthly income + the leftover from the previous month\r\nfunction salaryAmount(e) {\r\n    incomeAmount += parseFloat(e.currentTarget.value);\r\n    if(!incomeAmount > 0) return ;\r\n    incomeAmountNumber.textContent = incomeAmount.toFixed(2);\r\n    e.currentTarget.value = \"\";\r\n    localStorage.setItem('Income', JSON.stringify(incomeAmount))\r\n    sumAllColumns(sumOfEveryColumn);\r\n}\r\n\r\n// get the sum that was written down in the column\r\nfunction valueOfItemPrice(e){\r\n    // find active the input by data-name\r\n    const sameAttr = e.currentTarget.dataset.name;\r\n    // get the value from this input\r\n    const priceOfItem = parseFloat(e.currentTarget.value);\r\n    // loop over each column and check if data-name for the active\r\n    // input is the same as p for this column,\r\n    // then display new amount in p and sum it all up\r\n    columnAmount.forEach(p => {   \r\n        if (p.getAttribute(\"data-name\") === sameAttr)\r\n        {   // we take data-name and use it as objetct[key] to find correct column\r\n            sumOfEveryColumn[sameAttr] += priceOfItem;\r\n            p.textContent = sumOfEveryColumn[sameAttr].toFixed(2);\r\n        } \r\n    })\r\n    e.target.value = \"\";\r\n    addItemToList(priceOfItem, sameAttr);\r\n    displayTheList(itemsOfEveryColumn);\r\n    sumAllColumns(sumOfEveryColumn);\r\n}\r\n\r\n// loop over each column and take total amount , then sum them all up\r\nfunction sumAllColumns (objectOfSum) {\r\n    // make temporare arr and loop over all columns and push values to arr\r\n    let arrOfSumAllColumns = [];\r\n    // loop over each key of Object to get value\r\n    for (const [key, value] of Object.entries(objectOfSum)) {\r\n       arrOfSumAllColumns.push(value);\r\n    }\r\n    // take only last 5 added values from the arr and sum it all\r\n    const sumOfAllColumns = arrOfSumAllColumns\r\n        .splice(arrOfSumAllColumns.length - 5)\r\n        .reduce((prev, cur) => {\r\n            return prev + cur;\r\n        })\r\n    countMoneyLeft(moneyLeft, incomeAmount, sumOfAllColumns)\r\n    // moneyLeft.textContent = (incomeAmount - sumOfAllColumns).toFixed(2);\r\n    // totalExpenses.textContent = sumOfAllColumns.toFixed(2);\r\n}\r\n\r\nfunction countMoneyLeft(moneyAll, income, allExpences) {\r\n    moneyAll.textContent = (income - allExpences).toFixed(2);\r\n    totalExpenses.textContent = allExpences.toFixed(2);\r\n}\r\n\r\n// add items from input to the list for each column separately \r\nfunction addItemToList(inputValue, number) {\r\n    for ([key, value] of Object.entries(itemsOfEveryColumn)) {\r\n        if(key === number && inputValue > 0) {\r\n            value.push(inputValue)\r\n            addToLocalStorage(itemsOfEveryColumn)\r\n        }\r\n    }\r\n}\r\n\r\n// display the list all items for each column\r\nfunction displayTheList(objectOfColumns) {\r\n    for ([key, value] of Object.entries(objectOfColumns)) {\r\n        if(value.length > 0) {\r\n            const html = value.map((item, id)=>\r\n            `\r\n            <li class=\"item shopping-item\">\r\n                <span data-delete=\"${id}\" data-value=${item} class='delete'>x</span>\r\n                <span>${item}</span>\r\n            </li>  \r\n            `\r\n            ).join('');\r\n            shoppingList.forEach(list => {\r\n                if(list.dataset.name === key) {\r\n                    list.classList.add('open');\r\n                    list.innerHTML = html;\r\n                }\r\n            })\r\n        } else {\r\n            shoppingList.forEach(list => {\r\n                if(list.dataset.name === key) {\r\n                    list.classList.remove('open');\r\n                    list.innerHTML = ` `;\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n// click x to delete item from list and from Object Array\r\n// Arguments: id - x[id] , list is current list of column , and then our Object\r\nfunction deleteItem(deletedValue, id, list, objectOfColumns) {\r\n    let newArr;\r\n    for (let [key, value] of Object.entries(objectOfColumns)) {\r\n        if(key === list.dataset.name) {\r\n           newArr = value.filter((item, i) => i !== id);\r\n           value = newArr;\r\n        }\r\n        objectOfColumns[key] = value;\r\n    }\r\n \r\n    updateAmount(list, deletedValue);\r\n    displayTheList(itemsOfEveryColumn);\r\n    addToLocalStorage(objectOfColumns);\r\n}\r\n\r\n// update all numbers after deleting items in columns\r\nfunction updateAmount(numberOfList, deletedValue) {\r\n    columnAmount.forEach(p => {   \r\n        const columnNumber = numberOfList.dataset.name;\r\n        if (p.dataset.name === columnNumber)\r\n        {   // we take data-name and use it as objetct[key] to find correct column\r\n            sumOfEveryColumn[columnNumber] -= deletedValue;\r\n            p.textContent = sumOfEveryColumn[columnNumber].toFixed(2);\r\n        } \r\n        sumAllColumns(sumOfEveryColumn);\r\n    })\r\n}\r\n\r\n// set Local Storage\r\nfunction addToLocalStorage(objectOfColumns) {\r\n    for (let [key, value] of Object.entries(objectOfColumns)) {\r\n        localStorage.setItem(`column - ${key}`, JSON.stringify(objectOfColumns[key]));\r\n    }\r\n}\r\n\r\nfunction restoreFromLocalStorage(objectOfColumns) {\r\n    //pull the items from local storage\r\n    for (let [key, value] of Object.entries(objectOfColumns)) {\r\n        if(key) {\r\n            let listItems = JSON.parse(localStorage.getItem(`column - ${key}`)) || [];\r\n            if (listItems.length > 0) {\r\n                objectOfColumns[key].push(...listItems);\r\n                displayTheList(itemsOfEveryColumn);\r\n            }\r\n        }\r\n        columnAmount.forEach(p => {   \r\n            if (p.dataset.name === key && value.length > 0) {   \r\n                // we take data-name and use it as objetct[key] to find correct column\r\n                const amountToDisplay = [];\r\n                value.forEach(item => amountToDisplay.push(item));\r\n                const x = amountToDisplay.reduce((prev, next) => prev + next)\r\n                sumOfEveryColumn[key] += x;\r\n                p.textContent = sumOfEveryColumn[key].toFixed(2);\r\n            } \r\n        })\r\n    }   \r\n    let incomeStorage = JSON.parse(localStorage.getItem('Income')) || 0;\r\n    incomeAmountNumber.textContent = incomeStorage;\r\n    incomeAmount = incomeStorage;\r\n    let arrOfSumAllColumns = [];\r\n    // loop over each key of Object to get value\r\n    for (const [key, value] of Object.entries(sumOfEveryColumn)) {\r\n       arrOfSumAllColumns.push(value);\r\n    }\r\n    // take only last 5 added values from the arr and sum it all\r\n    const sumOfAllColumns = arrOfSumAllColumns\r\n        .splice(arrOfSumAllColumns.length - 5)\r\n        .reduce((prev, cur) => {\r\n            return prev + cur;\r\n        })\r\n    countMoneyLeft(moneyLeft, incomeAmount, sumOfAllColumns)\r\n    //countMoneyLeft(moneyLeft, incomeAmount, sumOfAllColumns)\r\n}\r\n\r\ninputsOfPrizes.forEach(input => input.addEventListener('change', valueOfItemPrice));\r\nincomeInput.addEventListener('change', salaryAmount);\r\n\r\n\r\nshoppingList.forEach(list => {\r\n    list.addEventListener('click', (e) => {\r\n        const btn = parseInt(e.target.dataset.delete);\r\n        const chosenValue = parseFloat(e.target.dataset.value);\r\n        if(btn || btn === 0) {\r\n            deleteItem(chosenValue, btn, list, itemsOfEveryColumn);\r\n        }\r\n    })\r\n})\r\n\r\n\r\nrestoreFromLocalStorage(itemsOfEveryColumn);\r\ndisplayTheList(itemsOfEveryColumn);\r\n\r\n"]}